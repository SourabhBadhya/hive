PREHOOK: query: DROP TABLE IF EXISTS source
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS source
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_orc_ctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_orc_ctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_orc_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_orc_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_parquet_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_parquet_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_avro_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_avro_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_textfile_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_textfile_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_partition_orc_ctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_orc_ctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_partition_orc_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_orc_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_partition_parquet_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_parquet_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_partition_avro_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_avro_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: DROP TABLE IF EXISTS test_partition_textfile_mmctas
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_textfile_mmctas
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE source (id int, value string) CLUSTERED BY(id) INTO 10 BUCKETS STORED AS ORC TBLPROPERTIES('transactional'='true')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@source
POSTHOOK: query: CREATE TABLE source (id int, value string) CLUSTERED BY(id) INTO 10 BUCKETS STORED AS ORC TBLPROPERTIES('transactional'='true')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@source
PREHOOK: query: INSERT INTO source values ('1','one'),('2','two'),('3','three'),('4','four'),('5','five'),('6','six'),('7','seven'),('8','eight'),('9','nine'),('10','ten'),('11','eleven'),('12','twelve'),('13','thirteen'),('14','fourteen'),('15','fifteen'),('16','sixteen'),('17','seventeen'),('18','eighteen'),('19','nineteen'),('20','twenty')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@source
POSTHOOK: query: INSERT INTO source values ('1','one'),('2','two'),('3','three'),('4','four'),('5','five'),('6','six'),('7','seven'),('8','eight'),('9','nine'),('10','ten'),('11','eleven'),('12','twelve'),('13','thirteen'),('14','fourteen'),('15','fifteen'),('16','sixteen'),('17','seventeen'),('18','eighteen'),('19','nineteen'),('20','twenty')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@source
POSTHOOK: Lineage: source.id SCRIPT []
POSTHOOK: Lineage: source.value SCRIPT []
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_orc_ctas STORED AS ORC TBLPROPERTIES('transactional'='true') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_orc_ctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_orc_ctas STORED AS ORC TBLPROPERTIES('transactional'='true') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_orc_ctas
POSTHOOK: Lineage: test_orc_ctas.id EXPRESSION []
POSTHOOK: Lineage: test_orc_ctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_orc_mmctas STORED AS ORC TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_orc_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_orc_mmctas STORED AS ORC TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_orc_mmctas
POSTHOOK: Lineage: test_orc_mmctas.id EXPRESSION []
POSTHOOK: Lineage: test_orc_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_parquet_mmctas STORED AS PARQUET TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_parquet_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_parquet_mmctas STORED AS PARQUET TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_parquet_mmctas
POSTHOOK: Lineage: test_parquet_mmctas.id EXPRESSION []
POSTHOOK: Lineage: test_parquet_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_avro_mmctas STORED AS AVRO TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_avro_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_avro_mmctas STORED AS AVRO TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_avro_mmctas
POSTHOOK: Lineage: test_avro_mmctas.id EXPRESSION []
POSTHOOK: Lineage: test_avro_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_textfile_mmctas STORED AS TEXTFILE TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_textfile_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_textfile_mmctas STORED AS TEXTFILE TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_textfile_mmctas
POSTHOOK: Lineage: test_textfile_mmctas.id EXPRESSION []
POSTHOOK: Lineage: test_textfile_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_orc_ctas PARTITIONED BY (id) STORED AS ORC TBLPROPERTIES('transactional'='true') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_partition_orc_ctas
PREHOOK: Output: default@test_partition_orc_ctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_orc_ctas PARTITIONED BY (id) STORED AS ORC TBLPROPERTIES('transactional'='true') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_partition_orc_ctas
POSTHOOK: Output: default@test_partition_orc_ctas
POSTHOOK: Output: default@test_partition_orc_ctas@id=1
POSTHOOK: Output: default@test_partition_orc_ctas@id=2
POSTHOOK: Lineage: test_partition_orc_ctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_orc_ctas PARTITION(id=1).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_orc_ctas PARTITION(id=2).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_orc_mmctas PARTITIONED BY (id) STORED AS ORC TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_partition_orc_mmctas
PREHOOK: Output: default@test_partition_orc_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_orc_mmctas PARTITIONED BY (id) STORED AS ORC TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_partition_orc_mmctas
POSTHOOK: Output: default@test_partition_orc_mmctas
POSTHOOK: Output: default@test_partition_orc_mmctas@id=1
POSTHOOK: Output: default@test_partition_orc_mmctas@id=2
POSTHOOK: Lineage: test_partition_orc_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_orc_mmctas PARTITION(id=1).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_orc_mmctas PARTITION(id=2).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_parquet_mmctas PARTITIONED BY (id) STORED AS PARQUET TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_partition_parquet_mmctas
PREHOOK: Output: default@test_partition_parquet_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_parquet_mmctas PARTITIONED BY (id) STORED AS PARQUET TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_partition_parquet_mmctas
POSTHOOK: Output: default@test_partition_parquet_mmctas
POSTHOOK: Output: default@test_partition_parquet_mmctas@id=1
POSTHOOK: Output: default@test_partition_parquet_mmctas@id=2
POSTHOOK: Lineage: test_partition_parquet_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_parquet_mmctas PARTITION(id=1).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_parquet_mmctas PARTITION(id=2).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_avro_mmctas PARTITIONED BY (id) STORED AS AVRO TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_partition_avro_mmctas
PREHOOK: Output: default@test_partition_avro_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_avro_mmctas PARTITIONED BY (id) STORED AS AVRO TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_partition_avro_mmctas
POSTHOOK: Output: default@test_partition_avro_mmctas
POSTHOOK: Output: default@test_partition_avro_mmctas@id=1
POSTHOOK: Output: default@test_partition_avro_mmctas@id=2
POSTHOOK: Lineage: test_partition_avro_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_avro_mmctas PARTITION(id=1).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_avro_mmctas PARTITION(id=2).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_textfile_mmctas PARTITIONED BY (id) STORED AS TEXTFILE TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@source
PREHOOK: Output: database:default
PREHOOK: Output: default@test_partition_textfile_mmctas
PREHOOK: Output: default@test_partition_textfile_mmctas
POSTHOOK: query: CREATE TABLE IF NOT EXISTS test_partition_textfile_mmctas PARTITIONED BY (id) STORED AS TEXTFILE TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only') AS (SELECT * FROM source WHERE id = 1 UNION SELECT * FROM source WHERE id = 2)
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@source
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_partition_textfile_mmctas
POSTHOOK: Output: default@test_partition_textfile_mmctas
POSTHOOK: Output: default@test_partition_textfile_mmctas@id=1
POSTHOOK: Output: default@test_partition_textfile_mmctas@id=2
POSTHOOK: Lineage: test_partition_textfile_mmctas.value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_textfile_mmctas PARTITION(id=1).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
POSTHOOK: Lineage: test_partition_textfile_mmctas PARTITION(id=2).value EXPRESSION [(source)source.FieldSchema(name:value, type:string, comment:null), ]
PREHOOK: query: SELECT * FROM test_orc_ctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_orc_ctas
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_orc_ctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_orc_ctas
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	one
2	two
PREHOOK: query: SELECT * FROM test_orc_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_orc_mmctas
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_orc_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_orc_mmctas
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	one
2	two
PREHOOK: query: SELECT * FROM test_parquet_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_parquet_mmctas
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_parquet_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_parquet_mmctas
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	one
2	two
PREHOOK: query: SELECT * FROM test_avro_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_avro_mmctas
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_avro_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_avro_mmctas
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	one
2	two
PREHOOK: query: SELECT * FROM test_textfile_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_textfile_mmctas
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_textfile_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_textfile_mmctas
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	one
2	two
PREHOOK: query: SELECT * FROM test_partition_orc_ctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_partition_orc_ctas
PREHOOK: Input: default@test_partition_orc_ctas@id=1
PREHOOK: Input: default@test_partition_orc_ctas@id=2
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_partition_orc_ctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_partition_orc_ctas
POSTHOOK: Input: default@test_partition_orc_ctas@id=1
POSTHOOK: Input: default@test_partition_orc_ctas@id=2
POSTHOOK: Output: hdfs://### HDFS PATH ###
one	1
two	2
PREHOOK: query: SELECT * FROM test_partition_orc_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_partition_orc_mmctas
PREHOOK: Input: default@test_partition_orc_mmctas@id=1
PREHOOK: Input: default@test_partition_orc_mmctas@id=2
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_partition_orc_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_partition_orc_mmctas
POSTHOOK: Input: default@test_partition_orc_mmctas@id=1
POSTHOOK: Input: default@test_partition_orc_mmctas@id=2
POSTHOOK: Output: hdfs://### HDFS PATH ###
one	1
two	2
PREHOOK: query: SELECT * FROM test_partition_parquet_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_partition_parquet_mmctas
PREHOOK: Input: default@test_partition_parquet_mmctas@id=1
PREHOOK: Input: default@test_partition_parquet_mmctas@id=2
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_partition_parquet_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_partition_parquet_mmctas
POSTHOOK: Input: default@test_partition_parquet_mmctas@id=1
POSTHOOK: Input: default@test_partition_parquet_mmctas@id=2
POSTHOOK: Output: hdfs://### HDFS PATH ###
one	1
two	2
PREHOOK: query: SELECT * FROM test_partition_avro_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_partition_avro_mmctas
PREHOOK: Input: default@test_partition_avro_mmctas@id=1
PREHOOK: Input: default@test_partition_avro_mmctas@id=2
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_partition_avro_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_partition_avro_mmctas
POSTHOOK: Input: default@test_partition_avro_mmctas@id=1
POSTHOOK: Input: default@test_partition_avro_mmctas@id=2
POSTHOOK: Output: hdfs://### HDFS PATH ###
one	1
two	2
PREHOOK: query: SELECT * FROM test_partition_textfile_mmctas
PREHOOK: type: QUERY
PREHOOK: Input: default@test_partition_textfile_mmctas
PREHOOK: Input: default@test_partition_textfile_mmctas@id=1
PREHOOK: Input: default@test_partition_textfile_mmctas@id=2
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: SELECT * FROM test_partition_textfile_mmctas
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_partition_textfile_mmctas
POSTHOOK: Input: default@test_partition_textfile_mmctas@id=1
POSTHOOK: Input: default@test_partition_textfile_mmctas@id=2
POSTHOOK: Output: hdfs://### HDFS PATH ###
one	1
two	2
PREHOOK: query: DROP TABLE IF EXISTS test_orc_ctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_orc_ctas
PREHOOK: Output: default@test_orc_ctas
POSTHOOK: query: DROP TABLE IF EXISTS test_orc_ctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_orc_ctas
POSTHOOK: Output: default@test_orc_ctas
PREHOOK: query: DROP TABLE IF EXISTS test_orc_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_orc_mmctas
PREHOOK: Output: default@test_orc_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_orc_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_orc_mmctas
POSTHOOK: Output: default@test_orc_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_parquet_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_parquet_mmctas
PREHOOK: Output: default@test_parquet_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_parquet_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_parquet_mmctas
POSTHOOK: Output: default@test_parquet_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_avro_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_avro_mmctas
PREHOOK: Output: default@test_avro_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_avro_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_avro_mmctas
POSTHOOK: Output: default@test_avro_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_textfile_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_textfile_mmctas
PREHOOK: Output: default@test_textfile_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_textfile_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_textfile_mmctas
POSTHOOK: Output: default@test_textfile_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_partition_orc_ctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_partition_orc_ctas
PREHOOK: Output: default@test_partition_orc_ctas
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_orc_ctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_partition_orc_ctas
POSTHOOK: Output: default@test_partition_orc_ctas
PREHOOK: query: DROP TABLE IF EXISTS test_partition_orc_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_partition_orc_mmctas
PREHOOK: Output: default@test_partition_orc_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_orc_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_partition_orc_mmctas
POSTHOOK: Output: default@test_partition_orc_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_partition_parquet_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_partition_parquet_mmctas
PREHOOK: Output: default@test_partition_parquet_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_parquet_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_partition_parquet_mmctas
POSTHOOK: Output: default@test_partition_parquet_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_partition_avro_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_partition_avro_mmctas
PREHOOK: Output: default@test_partition_avro_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_avro_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_partition_avro_mmctas
POSTHOOK: Output: default@test_partition_avro_mmctas
PREHOOK: query: DROP TABLE IF EXISTS test_partition_textfile_mmctas
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@test_partition_textfile_mmctas
PREHOOK: Output: default@test_partition_textfile_mmctas
POSTHOOK: query: DROP TABLE IF EXISTS test_partition_textfile_mmctas
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@test_partition_textfile_mmctas
POSTHOOK: Output: default@test_partition_textfile_mmctas
